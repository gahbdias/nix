{

  description = "nix configurations";

  inputs = {
    dream2nix.url = github:nix-community/dream2nix?branch=main;
    home-manager.url = github:luisfelipemourapereira/home-manager?branch=release-22.11;
    flake-utils.url = github:numtide/flake-utils?branch=master;
    nix-darwin.url = github:LnL7/nix-darwin?branch=master;
    pythonix.url = github:Mic92/pythonix?branch=master;
    sops-nix.url = github:Mic92/sops-nix;
    nix-funcs.url = github:t3rro/nix-funcs;
    nix-pub.url = github:luisfelipemourapereira/nix-pub;
    nixpkgs.url = github:NixOS/nixpkgs?branch=release-22.11;
    bundix = {
      url = github:nix-community/bundix?branch=master;
      flake = false;
    };
    hydra.url = github:NixOS/hydra?branch=master;
    arion.url = github:hercules-ci/arion?branch=master;
    cauda.url = git+ssh://git@github.com/luisfelipemourapereira/cauda?ref=main;
    nixt = {
      url = github:nix-community/nixt?branch=master;
      flake = false;
    };
    nur.url = github:nix-community/nur;
  };

  outputs =
    { home-manager
    , flake-utils
    , nix-darwin
    , dream2nix
    , nix-funcs
    , pythonix
    , sops-nix
    , nix-pub
    , nixpkgs
    , bundix
    , hydra
    , arion
    , cauda
    , nixt
    , self
    , nur
    }@inputs:
    let
      systems =
        let
          # a stub module for testing stuff
          defaultModule = { pkgs, ... }: { };
          funcs = import ./funcs;
          mkHomeConfiguration = name: node: pkgs: extraSpecialArgs:
            home-manager.lib.homeManagerConfiguration {
              inherit extraSpecialArgs pkgs;
              modules = [ users/${name}/${node}/home.nix ];
            };
          system = "x86_64-linux";
          pkgs = nixpkgs.legacyPackages."${system}";
          specialArgs = { inherit inputs outputs; };
          stdenv = pkgs.stdenv;
          inherit (self) outputs;
          home.modules = import ./modules/home-manager;
          node.modules = import ./modules/nixos;
          extraSpecialArgs = specialArgs;
          localPackages = import ./pkgs specialArgs;
          home.configurations = {
            "luis@rai" =
              mkHomeConfiguration "luis" "rai" pkgs extraSpecialArgs;
            "luis@plo" =
              mkHomeConfiguration "luis" "plo" pkgs extraSpecialArgs;
            "t3rro@rai" =
              mkHomeConfiguration "t3rro" "rai" pkgs extraSpecialArgs;
            "t3rro@plo" =
              mkHomeConfiguration "t3rro" "plo" pkgs extraSpecialArgs;
          };
          node.configurations = rec {

            # coding desktop
            rai = nixpkgs.lib.nixosSystem {
              inherit system specialArgs;
              modules = [ nodes/rai ];
            };

            # gaming desktop
            plo = nixpkgs.lib.nixosSystem {
              inherit system specialArgs;
              modules = [ nodes/plo ];
            };
          };

          darwin.configurations = {

            # personal macos laptop
            ani = nix-darwin.lib.darwinSystem {
              specialArgs = { inherit outputs; };
              system = "x86_64-darwin";
              modules = [
                home-manager.darwinModules.home-manager
                ./nodes/ani
              ];
            };

            # work macos laptop
            cid = nix-darwin.lib.darwinSystem {
              specialArgs = { inherit outputs; };
              system = "x86_64-darwin";
              modules = [
                home-manager.darwinModules.home-manager
                ./nodes/cid
              ];
            };

          };
        in
        {
          overlays = [
            self: super:
              rec {
                python3 = with super; super.python3.override {
                  packageOverrides = self: super: {
                    botocore = super.botocore.overridePythonAttrs (oldAttrs: rec {
                      version = "2.0.0dev25";
                      src = fetchFromGitHub {
                        owner = "boto";
                        repo = "botocore";
                        rev = "bf9a885fa0bc0bba0c3c806eeeb60d9ad5f3e069";
                        sha256 = "1llshaxpnz9a7mw4kkz9msdgkzz3in5ws3rvd7l077ghj9jkfz9a";
                      };
                    });
                    prompt_toolkit = super.prompt_toolkit.overridePythonAttrs (oldAttrs: rec {
                      version = "2.0.10";
                      src = oldAttrs.src.override {
                        inherit version;
                        sha256 = "1nr990i4b04rnlw1ghd0xmgvvvhih698mb6lb6jylr76cs7zcnpi";
                      };
                    });
                  };
                };

                pythonPackages = python3.pkgs;

                awscli2 = with self; pythonPackages.buildPythonApplication rec {
                  pname = "awscli";
                  version = "2.0.21"; # N.B: if you change this, change botocore to a matching version too

                  src = fetchFromGitHub {
                    owner = "aws";
                    repo = "aws-cli";
                    rev = version;
                    sha256 = "1lxkdjsl3w9c621byy3gggadhfrw8xcw37x3xci9qszxqc10b467";
                  };

                  postPatch = ''
                    substituteInPlace setup.py --replace ",<0.16" ""
                    substituteInPlace setup.py --replace "cryptography>=2.8.0,<=2.9.0" "cryptography>=2.8.0,<2.10"
                  '';

                  # No tests included
                  doCheck = false;

                  propagatedBuildInputs = with pythonPackages; [
                    bcdoc
                    botocore
                    colorama
                    cryptography
                    docutils
                    groff
                    less
                    prompt_toolkit
                    pyyaml
                    rsa
                    ruamel_yaml
                    s3transfer
                    six
                  ];

                  postInstall = ''
                    mkdir -p $out/etc/bash_completion.d
                    echo "complete -C $out/bin/aws_completer aws" > $out/etc/bash_completion.d/awscli
                    mkdir -p $out/share/zsh/site-functions
                    mv $out/bin/aws_zsh_completer.sh $out/share/zsh/site-functions
                    rm $out/bin/aws.cmd
                  '';

                  passthru.python3 = python3; # for aws_shell

                  meta = with super.lib; {
                    homepage = "https://aws.amazon.com/cli/";
                    description = "Unified tool to manage your AWS services";
                    license = licenses.asl20;
                    maintainers = [ ];
                  };
                };
              }
          ];
          # attach to outputs so you can access it in nixos module
          # and pass to home-manager modules called by nixos modules
          inherit specialArgs extraSpecialArgs funcs;
          packages =
            { x86_64-linux = flake-utils.lib.flattenTree localPackages; };
          homeManagerModules = home.modules;
          homeConfigurations = home.configurations;
          nixosModules = node.modules;
          nixosConfigurations = node.configurations;
          darwinConfigurations = darwin.configurations;
        };
    in
    systems;
}
